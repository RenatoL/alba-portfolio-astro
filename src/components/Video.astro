---
export interface Props {                                                                                         
   title: string;                                                                                                 
   description: string;                                                                                           
   thumbnailUrl: string;                                                                                          
   videoUrl: string;                                                                                              
   videoProvider: 'youtube' | 'vimeo' | 'imdb';                                                                   
 } 

const { title, description, thumbnailUrl, videoUrl, videoProvider } = Astro.props;

// Extract video ID based on provider
const getVideoId = (url: string, provider: string) => {                                                          
   if (provider === 'youtube') {                                                                                  
     const regExp = /^.*(youtu.be\/|v\/|u\/\w\/|embed\/|watch\?v=|&v=)([^#&?]*).*/;                               
     const match = url.match(regExp);                                                                             
     return match && match[2].length === 11 ? match[2] : null;                                                    
   } else if (provider === 'vimeo') {                                                                             
     const regExp = /vimeo\.com\/([0-9]+)/;                                                                       
     const match = url.match(regExp);                                                                             
     return match ? match[1] : null;                                                                              
   } else if (provider === 'imdb') {                                                                              
     const regExp = /\/video\/([a-zA-Z0-9]+)/;                                                                    
     const match = url.match(regExp);                                                                             
     return match ? match[1] : null;                                                                              
   }                                                                                                              
   return null;                                                                                                   
 };

const videoId = getVideoId(videoUrl, videoProvider);
---

<div class="video-container">
  <div class="video-content">
    <div class="thumbnail-wrapper" data-video-id={videoId} data-provider={videoProvider}>
      <img 
        src={thumbnailUrl} 
        alt={title} 
        class="thumbnail"
      />
      <button class="play-button" aria-label="Play video">
        <svg width="68" height="48" viewBox="0 0 68 48"><path class="play-button-bg" d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z"></path><path class="play-button-icon" d="M 45,24 27,14 27,34"></path></svg>
      </button>
    </div>
  </div>
  <div class="video-info">
    <h3>{title}</h3>
    <p>{description}</p>
  </div>
</div>

<div class="video-modal" id="videoModal">
  <div class="modal-content">
    <button class="close-button" aria-label="Close video">&times;</button>
    <div class="video-embed"></div>
  </div>
</div>

<style>
  .video-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin: 2rem 0;
  }

  .video-content {
    position: relative;
    width: 100%;
    aspect-ratio: 16/9;
  }

  .thumbnail-wrapper {
    position: relative;
    width: 100%;
    height: 100%;
    cursor: pointer;
    overflow: hidden;
    border-radius: 8px;
  }

  .thumbnail {
    width: 100%;
    height: 100%;
    object-fit:scale-down;
    transition: transform 0.3s ease;
  }

  .thumbnail-wrapper:hover .thumbnail {
    transform: scale(1.05);
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: none;
    border: none;
    cursor: pointer;
    opacity: 0.9;
    transition: opacity 0.3s ease;
  }

  .play-button:hover {
    opacity: 1;
  }

  .play-button-bg {
    fill: #ff0000;
  }

  .play-button-icon {
    fill: #ffffff;
  }

  .video-info {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .video-info h3 {
    font-family: var(--font-heading);
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .video-info p {
    font-family: var(--font-body);
    line-height: 1.6;
  }

  .video-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.9);
    z-index: 1000;
  }

  .modal-content {
    position: relative;
    width: 90%;
    max-width: 1200px;
    margin: 2% auto;
    aspect-ratio: 16/9;
  }

  .close-button {
    position: absolute;
    right: -40px;
    top: 0;
    color: white;
    font-size: 2rem;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
  }

  .video-embed {
    width: 100%;
    height: 100%;
  }

  @media (max-width: 768px) {
    .video-container {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  function initializeVideos() {
    const thumbnails = document.querySelectorAll('.thumbnail-wrapper');
    const modal = document.querySelector('.video-modal');
    const videoEmbed = document.querySelector('.video-embed');
    const closeButton = document.querySelector('.close-button');

    thumbnails.forEach(thumbnail => {
      thumbnail.addEventListener('click', () => {
        const videoId = thumbnail.dataset.videoId;
        const provider = thumbnail.dataset.provider;
        
        let embedUrl = '';
        if (provider === 'youtube') {
          embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
        } else if (provider === 'vimeo') {
          embedUrl = `https://player.vimeo.com/video/${videoId}?autoplay=1`;
        } else if (provider === 'imdb') {                                                                        
           embedUrl = `https://www.imdb.com/video/imdb/${videoId}/imdb/embed?autoplay=true`;                      
         } 

        videoEmbed.innerHTML = `<iframe src="${embedUrl}" frameborder="0" allow="autoplay; fullscreen" allowfullscreen style="width:100%;height:100%;"></iframe>`;
        modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
      });
    });

    closeButton.addEventListener('click', () => {
      modal.style.display = 'none';
      videoEmbed.innerHTML = '';
      document.body.style.overflow = 'auto';
    });

    window.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.style.display = 'none';
        videoEmbed.innerHTML = '';
        document.body.style.overflow = 'auto';
      }
    });
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', initializeVideos);
</script>
