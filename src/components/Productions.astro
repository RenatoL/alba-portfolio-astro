---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';
import { nullable } from 'astro:schema';

export interface Props {
  title: string;
  description: string;
  thumbnailUrl: string;
  videoUrl?: string;
}

interface VideoFile {
  default: Record<string, any>;
}

const { title, description, thumbnailUrl, videoUrl } = Astro.props;

 const images = import.meta.glob<ImageMetadata>('/src/content/productions/promos/*');                                 
 const imagePath = Object.keys(images).find(path => path.includes(thumbnailUrl));                                 
 const imagePromise = imagePath ? images[imagePath]() : null;                                                     
 const imageModule = imagePromise ? await imagePromise : null;

 const videos = import.meta.glob<VideoFile>('/src/content/productions/videos/*',
   { query: '?url' })
 const videoPath = Object.keys(videos).find(path => path.includes(videoUrl))
 const videoPromise = videoPath ? videos[videoPath]() : null
 const videoModule = videoPromise ? await videoPromise : null
---

<div class="production-container">
  <div class="production-content">
    {videoUrl ? (
      <>
        <div class="thumbnail-overlay">
          {imageModule && ( 
          <Image 
            src={imageModule.default} 
            alt={title}
            width={1280}
            height={720}
            format="webp"
            quality={80}
            densities={[1, 2]}
            loading="lazy"
          />
          )}
          <button class="play-button" aria-label="Play video">
            <svg width="68" height="48" viewBox="0 0 68 48">
              <path class="play-button-bg" d="M66.52,7.74c-0.78-2.93-2.49-5.41-5.42-6.19C55.79,.13,34,0,34,0S12.21,.13,6.9,1.55 C3.97,2.33,2.27,4.81,1.48,7.74C0.06,13.05,0,24,0,24s0.06,10.95,1.48,16.26c0.78,2.93,2.49,5.41,5.42,6.19 C12.21,47.87,34,48,34,48s21.79-0.13,27.1-1.55c2.93-0.78,4.64-3.26,5.42-6.19C67.94,34.95,68,24,68,24S67.94,13.05,66.52,7.74z"></path>
              <path class="play-button-icon" d="M 45,24 27,14 27,34"></path>
            </svg>
          </button>
        </div>
        <div id="embed" class="video-embed hidden">
          <video 
            controls
            controlslist="nofullscreen noremoteplay"
            preload="metadata"
            tabindex="-1"
            disablepictureinpicture="true"
            disableRemotePlayback="true"
          >
            <source src={videoModule.default} type="video/mp4">
            Your browser does not support the video tag.
          </video>
        </div>
      </>
    ) : (
      <div class="image-only">
        {imageModule && ( 
        <Image 
          src={imageModule.default} 
          alt={title}
          width={1280}
          height={720}
          format="webp"
          quality={80}
          densities={[1, 2]}
          loading="lazy"
        />
        )}
      </div>
    )}
  </div>
  <div class="production-info">
    <h3>{title}</h3>
    <p>{description}</p>
  </div>
</div>

<style>
  .production-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 2rem;
    margin: 2rem 0;
  }

  .production-content {
    position: relative;
    width: 100%;
    aspect-ratio: 16/9;
    border-radius: 8px;
    overflow: hidden;
  }

  .image-only {
    width: 100%;
    height: 100%;
  }

  .image-only img {
    width: 100%;
    height: 100%;
    object-fit: contain;
    border-radius: 8px;
  }

  .thumbnail-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    cursor: pointer;
    transition: all 0.25s;
    transition-behavior: allow-discrete;
    opacity: 1;
    scale: 1;
  }

  .thumbnail-overlay img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }

  .play-button {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
  }

  .play-button:hover .play-button-bg {
    fill: #002FA7;
  }

  .play-button-bg {
    fill: rgba(33, 33, 33, 0.8);
    transition: fill 0.1s ease;
  }

  .play-button-icon {
    fill: #ffffff;
  }

  .video-embed {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  .video-embed iframe {
    width: 100%;
    height: 100%;
    border: none;
  }

  .hidden {
    display: none;
    opacity: 0;
    scale: 0;
    width: 0;
  }

  .production-info {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .production-info h3 {
    font-family: var(--font-heading);
    font-size: 1.5rem;
    margin-bottom: 1rem;
  }

  .production-info p {
    font-family: var(--font-body);
    line-height: 1.6;
  }

  @media (max-width: 768px) {
    .production-container {
      grid-template-columns: 1fr;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const productionContents = document.querySelectorAll('.production-content');
    
    productionContents.forEach(content => {
      const thumbnail = content.querySelector('.thumbnail-overlay');
      const videoEmbed = content.querySelector('.video-embed');

      thumbnail?.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        if (thumbnail && videoEmbed) {
          /* thumbnail.style.display = 'none'; */
          thumbnail.classList.add('hidden');
          videoEmbed.classList.remove('hidden');
          videoEmbed.querySelector('video').play();
          // Keep focus on the parent section
          const section = content.closest('.section');
          if (section) {
            section.focus();
          }
        }
      });
    });
  });

document.addEventListener('DOMContentLoaded', () => {                                                            
   const videos = document.querySelectorAll('video');                                                             
                                                                                                                  
   videos.forEach(video => {                                                                                      
     video.addEventListener('play', (event) => {                                                                  
       videos.forEach(otherVideo => {                                                                             
         if (otherVideo !== event.target) {                                                                       
           otherVideo.pause();                                                                                    
         }                                                                                                        
       });                                                                                                        
     });                                                                                                          
   });                                                                                                            
 }); 

  document.querySelectorAll('video').forEach(video => {
    video.addEventListener('click', function(e) {
      e.preventDefault();
      const section = this.closest('.section');
      if (section) {
        section.focus();
      }
      return true;
    });
    
    video.addEventListener('keydown', function(e) {
      if (e.code === 'Space') {
        e.preventDefault();
        if (this.paused) this.play();
        else this.pause();
        const section = this.closest('.section');
        if (section) {
          section.focus();
        }
      }
    });

    video.addEventListener('focus', function(e) {
      const section = this.closest('.section');
      if (section) {
        section.focus();
      }
    });
  });
</script>
